# Pentagonal numbers are generated by the formula, P(n)=n(3n−1)/2. The first ten
# pentagonal numbers are:
# 
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their difference, 70
# − 22 = 48, is not pentagonal.
# 
# Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and
# difference are pentagonal and D = |P(k) − P(j)| is minimised; what is the value of
# D?

from time import *
from math import sqrt

# REF: http://www.divye.in/2012/07/how-do-you-determine-if-number-n-is.html
# This provides a formula for discovering if a number is pentagonal
def isPent(n):
    return sqrt(24*n+1)%6 == 5

while True:
    n=int(input("Enter num of pents to generate (3000): "))
    start=clock()
    pent = [int((n*(3*n-1))/2) for n in range(1,n)] # generate pentagonal numbers
    D=float("inf") # Keep track of minimum values
    kmin=0
    jmin=0
    for pk in range(1,len(pent)): # start one ahead of pent
        for pj in range(pk):
            pentNum=pent[pk]+pent[pj]
            if isPent(pentNum):
                tmp = pent[pk] - pent[pj]
                if isPent(tmp) and tmp < D: 
                    jmin=pent[pj]
                    kmin=pent[pk]
                    D=tmp
                    print("Found Min val! {}".format(D))
    print("Minimum value for D is {} for pk={} and pj={}".format(D, kmin, jmin))
    print("Program took {} seconds to run".format(clock()-start))
