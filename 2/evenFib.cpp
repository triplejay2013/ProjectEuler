#include <iostream>
#include <vector>
/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of
 * the even-valued terms.
*/

using namespace std;

vector<int> fib(int length) {
    vector<int> ret;
    int current;
    for(int i = 0; i < length; ++i) {
        if(i==0) ret.push_back(1);
        else if(i==1) ret.push_back(2);
        else {
            current = ret[i-1]+ret[i-2];
            if(current > 4000000) break;
            ret.push_back(current);
        }
    }
    return ret;
}

void print(const vector<int>& toPrint) {
    for (int i : toPrint) {
        cout << i << endl;
    }
}

vector<int> parseEven(const vector<int>& vec) {
    vector<int> ret;
    for (int i : vec) {
        if(i %2==0) {
            ret.push_back(i);
        }
    }
    return ret;
}

int sum(const vector<int>& vec) {
    int sum = 0;
    for (int i : vec) {
        sum += i;
    }
    return sum;
}

int main() {
    vector<int> fibSeq;
    fibSeq = fib(4000000);
    print(fibSeq);
    vector<int> parsedVec = parseEven(fibSeq);
//    print(parsedVec);
    int answer = sum(parsedVec);
    printf("The answer is %d\n", answer);

    return 0;
}
